library(highcharter)
library(rCharts)
library(tidyr)
library(dplyr)
library(RColorBrewer)
##
gender_df <- total_df %>% gather(key = "gender",value = "population","male","female")
### load library
library(leaflet)
library(dplyr)
library(geojsonio)
library(tigris)
library(readr)
library(RColorBrewer)
### load data
province_map <- topojson_read("data/map/gis-data/province.topojson", verbose = FALSE)
###
total_df <- read_csv("data/processed/population/00_totaldf.csv")
new_data <- geo_join(province_map,total_df,'Title','state')
#popup_00 <- paste0("<strong>",new_data$state,"</strong>","</br>", "Household: ",new_data$household)
bins <- c(200000, 400000, 600000, 800000,1000000,1200000,1400000, Inf)
pal <- colorBin("Reds", domain = new_data$household, bins = bins)
#labels <- sprintf("<strong>%s</strong><br/> House: %g",new_data$state,new_data$household
#) %>% lapply(htmltools::HTML)
label2 <- as.list(paste0("<strong>",new_data$state,"</strong>","<br/>Household: ",new_data$household,"<br/>Total:",new_data$total) %>% lapply(htmltools::HTML))
### new cloropeth map
new_map <- leaflet(new_data) %>%
setView(84.1240,28.3949,6) %>%
addProviderTiles("Esri.WorldGrayCanvas", options = leafletOptions(minZoom = 6,maxZoom = 9))
new_map %>% addPolygons(data = new_data,
fillColor = ~pal(new_data$household) ,
fillOpacity = 0.7,
opacity = 1,
weight = 2,
color = "white",
dashArray = "0.5",
smoothFactor = 0.5,
label  = label2,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto")
)
### load library
library(leaflet)
library(dplyr)
library(geojsonio)
library(tigris)
library(readr)
library(RColorBrewer)
library(highcharter)
library(flexdashboard)
library(tidyr)
install.packages("flexdashboard")
install.packages("tidyverse")
### Household + Population Barchart Module
### required Library
source('script/package.R')
create_pop_chart <- function(df_address){
main_df<- read_csv(df_address)
pop_house_df <- main_df %>% gather(key = "type",value = "population_household",-state,-male,-female)
pop_house_df <- arrange(pop_house_df,desc(type),female)
cols <- brewer.pal(n = 2, name = "Dark2")
hchart(pop_house_df,"column", hcaes(x= state, y = population_household, group = type)) %>%
hc_colors(cols) %>% hc_exporting(enabled = TRUE)
}
### Mapping module
### required Library
source('script/package.R')
province_map <- topojson_read("data/map/gis-data/province.topojson", verbose = FALSE)
create_map <- function(df_address,column1,column2,bins =
c(0,1000000, 2000000, 3000000, 4000000,5000000,6000000, Inf))
{
main_df <- read_csv(df_address)
new_data <- geo_join(province_map,main_df,'Title','state')
#popup_00 <- paste0("<strong>",new_data$state,"</strong>","</br>", "Household: ",new_data$household)
bins <- bins
pal <- colorBin("Reds", domain = new_data[[column2]], bins = bins)
#labels <- sprintf("<strong>%s</strong><br/> House: %g",new_data$state,new_data$household
#) %>% lapply(htmltools::HTML)
label2 <- as.list(paste0("<strong>",new_data$state,"</strong>","<br/>Household: ",new_data[[column1]],"<br/>Population:",new_data[[column2]]) %>% lapply(htmltools::HTML))
### new cloropeth map
new_map <- leaflet(new_data) %>%
setView(84.1240,28.3949,6) %>%
addProviderTiles("Esri.WorldGrayCanvas", options = leafletOptions(minZoom = 6,maxZoom = 9))
new_map %>% addPolygons(data = new_data,
fillColor = ~pal(new_data[[column2]]) ,
fillOpacity = 0.7,
opacity = 1,
weight = 2,
color = "white",
dashArray = "0.5",
smoothFactor = 0.5,
label  = label2,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto")
)%>%
addLegend(pal = pal, values = ~column2, opacity = 0.7, title = NULL,
position = "topright")
}
### Per House Hold
### required Library
source('script/package.R')
create_per_house <- function(df_address)
{
main_df<- read_csv(df_address)
per_house_df <- main_df %>%
mutate(people_per_house = population/household,male_per_house = male/household,female_per_house = female/household)%>%
gather(key = "type",value = "per_house",-state,-male,-female,-population,-household)
per_house_df$per_house <- round(per_house_df$per_house,4)
per_house_df <- arrange(per_house_df,type,per_house)
cols <- c("#1E88E5","#FFC107","#D81B60")
hchart(per_house_df,"column", hcaes(x= state, y = per_house, group = type)) %>%
hc_colors(cols) %>% hc_exporting(enabled = TRUE)
}
library(highcharter)
library(rCharts)
library(tidyr)
library(dplyr)
library(RColorBrewer)
##
gender_df <- total_df %>% gather(key = "gender",value = "population","male","female")
##rcharts
hair_eye_male <- subset(as.data.frame(HairEyeColor), Sex == "Male")
n1 <- nPlot(Freq ~ Hair, group = "Eye", data = hair_eye_male,
type = 'multiBarChart')
n1
chart <- nPlot(population ~ state, color = cols, group = "gender", data = gender_df,
type = 'multiBarChart')
chart
cols <- brewer.pal(n = 2, name = "Set1")
hchart(gender_df, "column", hcaes(x = state, y = population, group = gender)) %>%
hc_colors(cols)
pop_house_df <- total_df %>% gather(key = "type",value = "n",-state,-male,-female)
hchart(pop_house_df,"column", hcaes(x= state, y = n, group = type)) %>% hc_colors(cols)
library(highcharter)
library(rCharts)
library(tidyr)
library(dplyr)
library(RColorBrewer)
##
gender_df <- total_df %>% gather(key = "gender",value = "population","male","female")
##rcharts
hair_eye_male <- subset(as.data.frame(HairEyeColor), Sex == "Male")
n1 <- nPlot(Freq ~ Hair, group = "Eye", data = hair_eye_male,
type = 'multiBarChart')
n1
chart <- nPlot(population ~ state, color = cols, group = "gender", data = gender_df,
type = 'multiBarChart')
chart
cols <- brewer.pal(n = 2, name = "Set1")
hchart(gender_df, "column", hcaes(x = state, y = population, group = gender)) %>%
hc_colors(cols)
pop_house_df <- total_df %>% gather(key = "type",value = "n",-state,-male,-female)
hchart(pop_house_df,"column", hcaes(x= state, y = n, group = type)) %>% hc_colors(cols)
##
gender_df <- total_df %>% gather(key = "gender",value = "population","male","female")
install.packages(c("geojsonio", "leaflet", "readr", "tigris"))
### load data
province_map <- topojson_read("data/map/gis-data/province.topojson", verbose = FALSE)
### load data
province_map <- topojson_read("data\map\gis-data\province.topojson", verbose = FALSE)
### load data
province_map <- topojson_read("\data\map\gis-data\province.topojson", verbose = FALSE)
/
getwd()
### load library
library(leaflet)
library(dplyr)
library(geojsonio)
library(tigris)
library(readr)
library(RColorBrewer)
### load data
province_map <- topojson_read("data/map/gis-data/province.topojson", verbose = FALSE)
install.packages("sf")
### load data
province_map <- topojson_read("data/map/gis-data/province.topojson", verbose = FALSE)
### load library
library(leaflet)
library(dplyr)
library(geojsonio)
library(tigris)
library(readr)
library(RColorBrewer)
### load data
province_map <- topojson_read("data/map/gis-data/province.topojson", verbose = FALSE)
library(sf)
### load data
province_map <- topojson_read("data/map/gis-data/province.topojson", stringsAsFactors = F, verbose = FALSE)
### load data
province_map <- topojson_read("data/map/gis-data/province.topojson", stringsAsFactors = F, verbose = FALSE)
### load data
province_map <- topojson_read("data/map/gis-data/province.topojson", verbose = FALSE)
### load library
library(leaflet)
library(dplyr)
library(geojsonio)
library(tigris)
library(sf)
library(readr)
library(RColorBrewer)
### load data
province_map <- topojson_read("data/map/gis-data/province.topojson", verbose = FALSE)
###
total_df <- read_csv("data/processed/population/00_totaldf.csv")
new_data <- geo_join(province_map,total_df,'Title','state')
bins <- c(200000, 400000, 600000, 800000,1000000,1200000,1400000, Inf)
pal <- colorBin("Reds", domain = new_data$household, bins = bins)
label2 <- as.list(paste0("<strong>",new_data$state,"</strong>","<br/>Household: ",new_data$household,"<br/>Total:",new_data$total) %>% lapply(htmltools::HTML))
### new cloropeth map
new_map <- leaflet(new_data) %>%
setView(84.1240,28.3949,6) %>%
addProviderTiles("Esri.WorldGrayCanvas", options = leafletOptions(minZoom = 6,maxZoom = 9))
### load data
province_map <- topojson_read("data/map/gis-data/province.topojson")
###
total_df <- read_csv("data/processed/population/00_totaldf.csv")
new_data <- geo_join(province_map,total_df,'Title','state')
bins <- c(200000, 400000, 600000, 800000,1000000,1200000,1400000, Inf)
pal <- colorBin("Reds", domain = new_data$household, bins = bins)
label2 <- as.list(paste0("<strong>",new_data$state,"</strong>","<br/>Household: ",new_data$household,"<br/>Total:",new_data$total) %>% lapply(htmltools::HTML))
### new cloropeth map
new_map <- leaflet(new_data) %>%
setView(84.1240,28.3949,6) %>%
addProviderTiles("Esri.WorldGrayCanvas", options = leafletOptions(minZoom = 6,maxZoom = 9))
new_map %>% addPolygons(data = new_data,
fillColor = ~pal(new_data$household) ,
fillOpacity = 0.7,
opacity = 1,
weight = 2,
color = "white",
dashArray = "0.5",
smoothFactor = 0.5,
label  = label2,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto")
)
### Gender BarChart module
### required Library
source('script/package.R')
create_gen_chart <- function(df_address)
{
main_df <- read_csv(df_address)
gender_df <- main_df %>% gather(key = "gender",value = "population","male","female")
gender_df <- arrange(gender_df,population)
cols <- brewer.pal(n = 2, name = "Set1")
hchart(gender_df, "column", hcaes(x = state, y = population, group = gender)) %>%
hc_colors(cols)%>%
hc_exporting(enabled = TRUE)
}
install.packages(c("flexdashboard", "geojsonio", "leaflet", "readr", "tigris"))
install.packages(c("flexdashboard", "geojsonio", "leaflet", "readr", "tigris"))
library(highcharter)
library(rCharts)
library(tidyr)
library(dplyr)
library(RColorBrewer)
##
gender_df <- total_df %>% gather(key = "gender",value = "population","male","female")
##rcharts
hair_eye_male <- subset(as.data.frame(HairEyeColor), Sex == "Male")
n1 <- nPlot(Freq ~ Hair, group = "Eye", data = hair_eye_male,
type = 'multiBarChart')
n1
chart <- nPlot(population ~ state, color = cols, group = "gender", data = gender_df,
type = 'multiBarChart')
chart
cols <- brewer.pal(n = 2, name = "Set1")
hchart(gender_df, "column", hcaes(x = state, y = population, group = gender)) %>%
hc_colors(cols)
pop_house_df <- total_df %>% gather(key = "type",value = "n",-state,-male,-female)
hchart(pop_house_df,"column", hcaes(x= state, y = n, group = type)) %>% hc_colors(cols)
province_map <- topojson_read("data/map/gis-data/province.topojson")
create_map <- function(df_address,column1,column2,bins =
c(0,1000000, 2000000, 3000000, 4000000,5000000,6000000, Inf))
{
main_df <- read_csv(df_address)
new_data <- geo_join(province_map,main_df,'Title','state')
#popup_00 <- paste0("<strong>",new_data$state,"</strong>","</br>", "Household: ",new_data$household)
bins <- bins
pal <- colorBin("Reds", domain = new_data[[column2]], bins = bins)
#labels <- sprintf("<strong>%s</strong><br/> House: %g",new_data$state,new_data$household
#) %>% lapply(htmltools::HTML)
label2 <- as.list(paste0("<strong>",new_data$state,"</strong>","<br/>Household: ",new_data[[column1]],"<br/>Population:",new_data[[column2]]) %>% lapply(htmltools::HTML))
### new cloropeth map
new_map <- leaflet(new_data) %>%
setView(84.1240,28.3949,6) %>%
addProviderTiles("Esri.WorldGrayCanvas", options = leafletOptions(minZoom = 6,maxZoom = 9))
new_map %>% addPolygons(data = new_data,
fillColor = ~pal(new_data[[column2]]) ,
fillOpacity = 0.7,
opacity = 1,
weight = 2,
color = "white",
dashArray = "0.5",
smoothFactor = 0.5,
label  = label2,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto")
)%>%
addLegend(pal = pal, values = ~column2, opacity = 0.7, title = NULL,
position = "topright")
}
### required Library
source('script/package.R')
create_per_house <- function(df_address)
{
main_df<- read_csv(df_address)
per_house_df <- main_df %>%
mutate(people_per_house = population/household,male_per_house = male/household,female_per_house = female/household)%>%
gather(key = "type",value = "per_house",-state,-male,-female,-population,-household)
per_house_df$per_house <- round(per_house_df$per_house,4)
per_house_df <- arrange(per_house_df,type,per_house)
cols <- c("#1E88E5","#FFC107","#D81B60")
hchart(per_house_df,"column", hcaes(x= state, y = per_house, group = type)) %>%
hc_colors(cols) %>% hc_exporting(enabled = TRUE)
}
### required Library
source('script/package.R')
create_pie <- function(df_address = "data/processed/population/pop_distri.csv")
{
main_df<- read_csv(df_address)
main_df$percent <- round(main_df$percent,4)
cols <- c("#ff6361","#6aaa96","#0088cc","#ffa600","#bc5090")
hchart(main_df,"pie",hcaes(name=type,y=percent),name = "Population Distribution:") %>%
hc_colors(cols) %>% hc_exporting(enabled = TRUE)%>%
hc_subtitle(text="Population distribution of Nepal on Basis of adminstrative region")
}
### Household + Population Barchart Module
### required Library
source('script/package.R')
create_pop_chart <- function(df_address){
main_df<- read_csv(df_address)
pop_house_df <- main_df %>% gather(key = "type",value = "population_household",-state,-male,-female)
pop_house_df <- arrange(pop_house_df,desc(type),female)
cols <- brewer.pal(n = 2, name = "Dark2")
hchart(pop_house_df,"column", hcaes(x= state, y = population_household, group = type)) %>%
hc_colors(cols) %>% hc_exporting(enabled = TRUE)
}
### Household + Population Barchart Module
### required Library
source('script/package.R')
create_pop_chart <- function(df_address){
main_df<- read_csv(df_address)
pop_house_df <- main_df %>% gather(key = "type",value = "population_household",-state,-male,-female)
pop_house_df <- arrange(pop_house_df,desc(type),female)
cols <- brewer.pal(n = 2, name = "Dark2")
hchart(pop_house_df,"column", hcaes(x= state, y = population_household, group = type)) %>%
hc_colors(cols) %>% hc_exporting(enabled = TRUE)
}
warnings()
### Mapping module
### required Library
source('script/package.R')
province_map <- topojson_read("data/map/gis-data/province.topojson")
create_map <- function(df_address,column1,column2,bins =
c(0,1000000, 2000000, 3000000, 4000000,5000000,6000000, Inf))
{
main_df <- read_csv(df_address)
new_data <- geo_join(province_map,main_df,'Title','state')
#popup_00 <- paste0("<strong>",new_data$state,"</strong>","</br>", "Household: ",new_data$household)
bins <- bins
pal <- colorBin("Reds", domain = new_data[[column2]], bins = bins)
#labels <- sprintf("<strong>%s</strong><br/> House: %g",new_data$state,new_data$household
#) %>% lapply(htmltools::HTML)
label2 <- as.list(paste0("<strong>",new_data$state,"</strong>","<br/>Household: ",new_data[[column1]],"<br/>Population:",new_data[[column2]]) %>% lapply(htmltools::HTML))
### new cloropeth map
new_map <- leaflet(new_data) %>%
setView(84.1240,28.3949,6) %>%
addProviderTiles("Esri.WorldGrayCanvas", options = leafletOptions(minZoom = 6,maxZoom = 9))
new_map %>% addPolygons(data = new_data,
fillColor = ~pal(new_data[[column2]]) ,
fillOpacity = 0.7,
opacity = 1,
weight = 2,
color = "white",
dashArray = "0.5",
smoothFactor = 0.5,
label  = label2,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto")
)%>%
addLegend(pal = pal, values = ~column2, opacity = 0.7, title = NULL,
position = "topright")
}
library(readxl)
Table_1_1_ <- read_excel("C:/Users/User/Desktop/eh/Table 1(1).csv")
View(Table_1_1_)
library(readxl)
table <- read_excel("data/table.xls")
View(table)
library(readxl)
table <- read_excel("data/table.xls")
library(readxl)
table <- read_excel("data/table.xlsx")
table <- read_excel("data\table.xlsx")
table <- read_excel("./data/table.xlsx")
### load data
province_map <- topojson_read("data/map/gis-data/province.topojson")
###
total_df <- read_csv("data/processed/population/00_totaldf.csv")
new_data <- geo_join(province_map,total_df,'Title','state')
bins <- c(200000, 400000, 600000, 800000,1000000,1200000,1400000, Inf)
pal <- colorBin("Reds", domain = new_data$household, bins = bins)
label2 <- as.list(paste0("<strong>",new_data$state,"</strong>","<br/>Household: ",new_data$household,"<br/>Total:",new_data$total) %>% lapply(htmltools::HTML))
### new cloropeth map
new_map <- leaflet(new_data) %>%
setView(84.1240,28.3949,6) %>%
addProviderTiles("Esri.WorldGrayCanvas", options = leafletOptions(minZoom = 6,maxZoom = 9))
new_map %>% addPolygons(data = new_data,
fillColor = ~pal(new_data$household) ,
fillOpacity = 0.7,
opacity = 1,
weight = 2,
color = "white",
dashArray = "0.5",
smoothFactor = 0.5,
label  = label2,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto")
)
View(total_df)
###
total_df <- read_csv("data/processed/population/00_totaldf.csv")
new_data <- geo_join(district_map,total_df,'Title','state')
bins <- c(200000, 400000, 600000, 800000,1000000,1200000,1400000, Inf)
pal <- colorBin("Reds", domain = new_data$household, bins = bins)
label2 <- as.list(paste0("<strong>",new_data$state,"</strong>","<br/>Household: ",new_data$household,"<br/>Total:",new_data$total) %>% lapply(htmltools::HTML))
### new cloropeth map
new_map <- leaflet(new_data) %>%
setView(84.1240,28.3949,6) %>%
addProviderTiles("Esri.WorldGrayCanvas", options = leafletOptions(minZoom = 6,maxZoom = 9))
new_map %>% addPolygons(data = new_data,
fillColor = ~pal(new_data$household) ,
fillOpacity = 0.7,
opacity = 1,
weight = 2,
color = "white",
dashArray = "0.5",
smoothFactor = 0.5,
label  = label2,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto")
)
###
total_df <- read_csv("data/processed/population/00_totaldf.csv")
district_map <- topojson_read("data/map/gis-data/District.topojson")
###
total_df <- read_csv("data/processed/population/00_totaldf.csv")
new_data <- geo_join(district_map,total_df,'Title','state')
View(district_map)
district_map <- topojson_read("data/map/gis-data/District.topojson")
View(district_map)
View(district_map)
View(province_map)
View(total_df)
new_data <- geo_join(district_map,total_df,'Title','state')
knitr::opts_chunk$set(message = FALSE, warning = FALSE)
library(flexdashboard)
source("script/mapping.R")
source("script/gen_chart.R")
source("script/pop_chart.R")
source("script/per_house_chart.R")
source("script/pie_chart.R")
create_map(df_address = "data/processed/population/00_totaldf.csv", column1 = "household",column2 = "population")
create_pie(df_address = "data/processed/population/pop_distri.csv")
knitr::opts_chunk$set(message = FALSE, warning = FALSE)
library(flexdashboard)
source("script/mapping.R")
source("script/gen_chart.R")
source("script/pop_chart.R")
source("script/per_house_chart.R")
source("script/pie_chart.R")
create_pop_chart(df_address = "data/processed/population/00_totaldf.csv")
knitr::opts_chunk$set(echo = TRUE)
